Approach
create adjacency list for the given prequisites array where adjList[i] = prerequisites of course i
run dfs for every course. In case any of these dfs calls return false, it indicates there is a cycle in the graph and we can directly return false.
In the dfs we maintain a boolean[] visiting which is used to mark nodes on the current path. During our recursive dfs calls if we encounter a node such that visiting[node] = true, we can directly return false as this indicates a cycle. If none of the recursive dfs calls for a node (course) returns false, it means that the course can be completed. We set visiting[node] = false, add it to the result list and return true indicating that this course can be completed.
Complexity
n = number of nodes
p = prerequisites.length (aka edges)

DFS :

Time complexity: O(n + p)

Space complexity: O(n)
maximum recursion call stack for the dfs

Code
class Solution {
    public int[] findOrder(int n, int[][] prerequisites) {
        List<Integer>[] adjList = new List[n];;
        for(int i=0; i<n; i++) {
            adjList[i] = new ArrayList<>();
        }
        for(int[] prerequisite : prerequisites) {
            adjList[prerequisite[0]].add(prerequisite[1]);
        }
        List<Integer> res = new ArrayList<>();
        boolean[] visiting = new boolean[n];
        boolean[] visited = new boolean[n];
        for(int i=0; i<n; i++) {
            if(!dfs(adjList, i, visiting, visited, res)) {
                return new int[0];
            }
        }
        int[] resArray = new int[res.size()];
        for(int i=0; i<res.size(); i++){
            resArray[i] = res.get(i);   
        }
        return resArray;
    }
    
    public boolean dfs(List<Integer>[] adjList, int curr, boolean[] visiting, boolean[] visited, List<Integer> res) {
        // node has already been visited and added to res
        if(visited[curr]) {
            return true;
        }
        // we are encoutering a node already on the path, aka there is a cycle
        if(visiting[curr]) {
            return false;
        }
        visiting[curr] = true;
        for(int neighbour : adjList[curr]) {
            if(!dfs(adjList, neighbour, visiting, visited, res)) {
                return false;
            }
        }
        visiting[curr] = false;
        visited[curr] = true;
        res.add(curr);
        return true;
    }
    
}
